/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tts_TYPES_H
#define tts_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>






class Request {
 public:

  static const char* ascii_fingerprint; // = "DC8F62AF23854A1A6849A2A157CCCA65";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x8F,0x62,0xAF,0x23,0x85,0x4A,0x1A,0x68,0x49,0xA2,0xA1,0x57,0xCC,0xCA,0x65};

  Request() : str(), isFile(0), outputPath() {
  }

  virtual ~Request() throw() {}

  std::string str;
  bool isFile;
  std::string outputPath;

  void __set_str(const std::string& val) {
    str = val;
  }

  void __set_isFile(const bool val) {
    isFile = val;
  }

  void __set_outputPath(const std::string& val) {
    outputPath = val;
  }

  bool operator == (const Request & rhs) const
  {
    if (!(str == rhs.str))
      return false;
    if (!(isFile == rhs.isFile))
      return false;
    if (!(outputPath == rhs.outputPath))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Request &a, Request &b);

typedef struct _Response__isset {
  _Response__isset() : startTime(false), endTime(false), status(false) {}
  bool startTime;
  bool endTime;
  bool status;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

  Response() : startTime(0), endTime(0), status() {
  }

  virtual ~Response() throw() {}

  int64_t startTime;
  int64_t endTime;
  std::string status;

  _Response__isset __isset;

  void __set_startTime(const int64_t val) {
    startTime = val;
  }

  void __set_endTime(const int64_t val) {
    endTime = val;
  }

  void __set_status(const std::string& val) {
    status = val;
  }

  bool operator == (const Response & rhs) const
  {
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Response &a, Response &b);



#endif
